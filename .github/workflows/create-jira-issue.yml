name: Create Jira issue
on:
  issues:
    types:
      - opened

jobs:
  create-issue:
    name: Create Jira issue
    runs-on: ubuntu-latest
    steps:
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Determine Template Based on Label
        id: select-template
        run: |
          if [[ "${{ contains(github.event.issue.labels.*.name, 'refactor') }}" == "true" ]]; then
            echo "template=refactor.yml" >> $GITHUB_ENV
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'update') }}" == "true" ]]; then
            echo "template=update.yml" >> $GITHUB_ENV
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'style') }}" == "true" ]]; then
            echo "template=style.yml" >> $GITHUB_ENV
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'bug') }}" == "true" ]]; then
            echo "template=bug.yml" >> $GITHUB_ENV
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'feature') }}" == "true" ]]; then
            echo "template=feature.yml" >> $GITHUB_ENV
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'del') }}" == "true" ]]; then
            echo "template=del.yml" >> $GITHUB_ENV
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'fix') }}" == "true" ]]; then
            echo "template=fix.yml" >> $GITHUB_ENV
          else
            echo "template=default.yml" >> $GITHUB_ENV
          fi

      - name: Issue Parser
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/${{ env.template }}

      - name: Log Issue Parser
        run: |
          echo '${{ steps.issue-parser.outputs.issueparser_parentKey }}'
          echo '${{ steps.issue-parser.outputs.jsonString }}'

      - name: Convert markdown to Jira Syntax
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}

            ${{ github.event.issue.body }}
          mode: md2jira

      - name: Create Issue
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: GH
          issuetype: Task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: |
            {
              "parent": {
                "key": "${{ steps.issue-parser.outputs.issueparser_parentKey }}"
              }
            }

      - name: Log created issue
        run: echo "Jira Issue ${{ steps.issue-parser.outputs.issueparser_parentKey }}/${{ steps.create.outputs.issue }} was created"
