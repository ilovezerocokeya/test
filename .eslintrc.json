{
  // 프로젝트의 루트 디렉토리임을 나타냅니다.
  // 상위 디렉토리의 ESLint 설정을 상속받지 않습니다.
  "root": true,

  // TypeScript 코드를 파싱하기 위한 파서를 지정합니다.
  "parser": "@typescript-eslint/parser",

  // 사용할 ESLint 플러그인을 지정합니다.
  "plugins": ["@typescript-eslint"],

  // 확장할 설정들을 지정합니다.
  "extends": [
    // ESLint의 기본 추천 규칙
    "eslint:recommended",
    // TypeScript 관련 추천 규칙
    "plugin:@typescript-eslint/recommended",
    // Prettier와의 통합을 위한 설정
    "plugin:prettier/recommended"
  ],

  // 상세 규칙 설정
  "rules": {
    // === TypeScript 관련 규칙 ===

    // 함수의 반환 타입을 명시적으로 지정하도록 권장
    // 코드의 가독성과 타입 안정성을 높여줍니다.
    "@typescript-eslint/explicit-module-boundary-types": "warn",

    // any 타입 사용 시 경고
    // 타입 안정성을 높이기 위해 구체적인 타입 사용을 권장합니다.
    "@typescript-eslint/no-explicit-any": "warn",

    // 사용하지 않는 변수에 대한 경고
    // '_' 로 시작하는 변수는 무시합니다 (의도적으로 사용하지 않는 파라미터 표시 용도)
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],

    // 널 아님 단언(!) 사용 시 경고
    // 가능한 한 적절한 널 체크를 사용하도록 권장합니다.
    "@typescript-eslint/no-non-null-assertion": "warn",

    // === 코드 스타일 및 품질 규칙 ===

    // console.log() 사용 시 경고
    // 프로덕션 코드에서 디버깅 코드가 남지 않도록 합니다.
    "no-console": "warn",

    // debugger 구문 사용 시 경고
    // 프로덕션 코드에 디버거가 남지 않도록 합니다.
    "no-debugger": "warn",

    // 중복된 import 문을 금지
    // 코드의 명확성을 높이고 번들 크기를 줄입니다.
    "no-duplicate-imports": "error",

    // 사용되지 않는 표현식 금지
    // 불필요한 코드를 방지합니다.
    "no-unused-expressions": "error",

    // === 모던 자바스크립트 활용 규칙 ===

    // var 키워드 사용 금지
    // let과 const 사용을 강제합니다.
    "no-var": "error",

    // 재할당이 없는 변수는 const 사용을 강제
    // 코드의 의도를 명확히 하고 실수를 방지합니다.
    "prefer-const": "error",

    // 일반 함수 대신 화살표 함수 사용을 권장
    // this 바인딩 관련 문제를 줄이고 간결한 문법을 사용합니다.
    "prefer-arrow-callback": "error"
  },

  // 실행 환경 설정
  "env": {
    // 브라우저 전역 변수 사용 가능
    "browser": true,
    // Node.js 전역 변수 및 스코프 사용 가능
    "node": true,
    // ES6 전역 변수 사용 가능
    "es6": true
  },

  // 추가 설정
  "settings": {
    // TypeScript import 해석을 위한 설정
    "import/resolver": {
      "typescript": {}
    }
  }
}
